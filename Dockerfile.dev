# Development Dockerfile with extended tooling for Claudy backend
FROM golang:1.23-alpine

# Install development and debugging tools
RUN apk add --no-cache \
    git \
    make \
    curl \
    bash \
    vim \
    htop \
    tzdata \
    ca-certificates \
    wget \
    netcat-openbsd \
    procps

# Install Go development tools
RUN go install github.com/air-verse/air@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest && \
    go install honnef.co/go/tools/cmd/staticcheck@latest && \
    go install golang.org/x/tools/cmd/goimports@latest && \
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# Set working directory
WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Create non-root user for security
RUN adduser -D -s /bin/sh claudy

# Create necessary directories with proper permissions
RUN mkdir -p /tmp/claudy-workspaces && \
    mkdir -p /app/test_keys && \
    mkdir -p /app/logs && \
    chown -R claudy:claudy /app /tmp/claudy-workspaces

# Copy Air configuration
COPY .air.toml .

# Copy source code (this will be overridden by volume mount in development)
COPY . .

# Set proper ownership
RUN chown -R claudy:claudy /app

# Switch to non-root user
USER claudy

# Expose application port and debugger port
EXPOSE 8080 2345

# Health check for development
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command with hot reload
CMD ["air", "-c", ".air.toml"]