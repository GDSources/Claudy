# Docker Compose configuration for Claudy development environment

services:
  # Claudy Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: claudy-backend-dev
    restart: unless-stopped
    ports:
      - "8080:8080"   # Application HTTP port
      - "2345:2345"   # Delve debugger port
    environment:
      - ENV=development
      - PORT=8080
      - MONGO_URI=mongodb://mongo:27017/claudy_dev
      - REDIS_ADDR=redis:6379
      - DEBUG=true
      - JWT_PRIVATE_KEY_PATH=/app/test_keys/jwt_private_key.pem
      - JWT_PUBLIC_KEY_PATH=/app/test_keys/jwt_public_key.pem
      - CLAUDE_WORKSPACE_BASE_PATH=/tmp/claudy-workspaces
      - CLAUDE_CODE_PATH=claude-code
    volumes:
      - .:/app:cached                               # Mount source code for hot reload
      - go-mod-cache:/go/pkg/mod                    # Cache Go modules
      - workspace-data:/tmp/claudy-workspaces      # Persist workspace data
      - ./logs:/app/logs                           # Mount logs directory
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claudy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: claudy-mongo-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: devpassword
      MONGO_INITDB_DATABASE: claudy_dev
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - claudy-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: claudy-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - claudy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MongoDB Express - Web-based MongoDB admin interface
  mongo-express:
    image: mongo-express:1.0.2-20
    container_name: claudy-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: devpassword
      ME_CONFIG_MONGODB_URL: mongodb://root:devpassword@mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - claudy-network

  # Redis Commander - Web-based Redis admin interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: claudy-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - claudy-network

  # Test MongoDB for Integration Tests
  mongo-test:
    image: mongo:7.0
    container_name: claudy-mongo-test
    restart: no
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: testpassword
      MONGO_INITDB_DATABASE: claudy_test
    volumes:
      - mongo-test-data:/data/db
    networks:
      - claudy-network
    profiles:
      - testing
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Test Redis for Integration Tests
  redis-test:
    image: redis:7.0-alpine
    container_name: claudy-redis-test
    restart: no
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-test-data:/data
    networks:
      - claudy-network
    profiles:
      - testing
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

# Docker volumes for data persistence
volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  mongo-test-data:
    driver: local
  redis-data:
    driver: local
  redis-test-data:
    driver: local
  go-mod-cache:
    driver: local
  workspace-data:
    driver: local

# Docker network for service communication
networks:
  claudy-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16