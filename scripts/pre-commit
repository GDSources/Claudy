#!/bin/bash

# Pre-commit hook for Claudy project
# Runs code quality checks before allowing commits

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Running pre-commit checks...${NC}"

# Check if we're in the right directory
if [ ! -f "go.mod" ]; then
    echo -e "${RED}Error: Must be run from project root directory${NC}"
    exit 1
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Run go fmt
echo -e "${BLUE}Checking code formatting...${NC}"
UNFORMATTED=$(gofmt -l .)
if [ -n "$UNFORMATTED" ]; then
    echo -e "${RED}The following files are not properly formatted:${NC}"
    echo "$UNFORMATTED"
    echo -e "${YELLOW}Running go fmt...${NC}"
    go fmt ./...
    echo -e "${GREEN}Code formatted successfully${NC}"
fi

# Run goimports if available
if command_exists goimports; then
    echo -e "${BLUE}Running goimports...${NC}"
    goimports -w .
fi

# Run go vet
echo -e "${BLUE}Running go vet...${NC}"
if ! go vet ./...; then
    echo -e "${RED}go vet failed${NC}"
    exit 1
fi

# Run golangci-lint if available
if command_exists golangci-lint; then
    echo -e "${BLUE}Running golangci-lint...${NC}"
    if ! golangci-lint run --timeout=5m; then
        echo -e "${RED}golangci-lint failed${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}golangci-lint not found, skipping...${NC}"
fi

# Run tests
echo -e "${BLUE}Running tests...${NC}"
if ! go test ./... -short -timeout=30s; then
    echo -e "${RED}Tests failed${NC}"
    exit 1
fi

# Check go mod tidy
echo -e "${BLUE}Checking go mod tidy...${NC}"
cp go.mod go.mod.bak
cp go.sum go.sum.bak
go mod tidy
if ! cmp -s go.mod go.mod.bak || ! cmp -s go.sum go.sum.bak; then
    echo -e "${YELLOW}go.mod or go.sum was not tidy, fixing...${NC}"
    rm go.mod.bak go.sum.bak
    # Add the tidied files to the commit
    git add go.mod go.sum
else
    rm go.mod.bak go.sum.bak
fi

# Check for security issues with gosec if available
if command_exists gosec; then
    echo -e "${BLUE}Running security checks...${NC}"
    if ! gosec -quiet ./...; then
        echo -e "${YELLOW}Security issues found, please review${NC}"
        # Don't fail the commit for security issues, just warn
    fi
fi

# Check for TODO/FIXME comments in committed code
echo -e "${BLUE}Checking for TODO/FIXME comments...${NC}"
TODOS=$(git diff --cached --name-only --diff-filter=AM | grep '\.go$' | xargs grep -n 'TODO\|FIXME' || true)
if [ -n "$TODOS" ]; then
    echo -e "${YELLOW}Warning: Found TODO/FIXME comments in committed code:${NC}"
    echo "$TODOS"
    echo -e "${YELLOW}Consider addressing these before committing${NC}"
fi

# Check for debug statements
echo -e "${BLUE}Checking for debug statements...${NC}"
DEBUG_STATEMENTS=$(git diff --cached --name-only --diff-filter=AM | grep '\.go$' | xargs grep -n 'fmt\.Print\|log\.Print\|panic(' || true)
if [ -n "$DEBUG_STATEMENTS" ]; then
    echo -e "${YELLOW}Warning: Found potential debug statements:${NC}"
    echo "$DEBUG_STATEMENTS"
    echo -e "${YELLOW}Consider removing debug statements before committing${NC}"
fi

# Check for large files
echo -e "${BLUE}Checking for large files...${NC}"
LARGE_FILES=$(git diff --cached --name-only --diff-filter=AM | xargs ls -la 2>/dev/null | awk '$5 > 1048576 { print $9 " (" $5 " bytes)" }' || true)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}Warning: Found large files being committed:${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}Consider if these files should be committed${NC}"
fi

# Success message
echo -e "${GREEN}All pre-commit checks passed!${NC}"

# Add any auto-formatted files to the commit
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=AM | grep '\.go$' || true)
if [ -n "$STAGED_GO_FILES" ]; then
    # Check if any files were modified by formatting
    MODIFIED_FILES=$(git diff --name-only $STAGED_GO_FILES || true)
    if [ -n "$MODIFIED_FILES" ]; then
        echo -e "${BLUE}Adding auto-formatted files to commit...${NC}"
        git add $MODIFIED_FILES
    fi
fi

exit 0